diff --git a/Makefile.am b/Makefile.am
index 5da8446..87b9dde 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -61,10 +61,13 @@ SUBDIRS += libmipsbox libdvbci
 libstb_hal_la_LIBADD += \
 	libmipsbox/libmipsbox.la \
 	libdvbci/libdvbci.la
+	
+if !ENABLE_GSTREAMER_10
 SUBDIRS += libeplayer3
 libstb_hal_la_LIBADD += \
 	libeplayer3/libeplayer3.la
 endif
+endif
 
 pkginclude_HEADERS = \
 	include/audio_hal.h \
diff --git a/libarmbox/hardware_caps.c b/libarmbox/hardware_caps.c
index ededa7b..3d0f54b 100644
--- a/libarmbox/hardware_caps.c
+++ b/libarmbox/hardware_caps.c
@@ -17,6 +17,7 @@
 #include <sys/ioctl.h>
 
 #include <hardware_caps.h>
+#include <proc_tools.h>
 
 #define FP_DEV "/dev/dbox/oled0"
 static int initialized = 0;
@@ -53,8 +54,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "SOLO4K");
 	strcpy(caps.boxarch, "BCM7376");
-#endif
-#if BOXMODEL_VUDUO4K
+#elif BOXMODEL_VUDUO4K
 	initialized = 1;
 	caps.has_CI = 2;
 	caps.can_cec = 1;
@@ -72,8 +72,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "DUO4K");
 	strcpy(caps.boxarch, "BCM7278");
-#endif
-#if BOXMODEL_VUDUO4KSE
+#elif BOXMODEL_VUDUO4KSE
 	initialized = 1;
 	caps.has_CI = 2;
 	caps.can_cec = 1;
@@ -91,8 +90,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "DUO4KSE");
 	strcpy(caps.boxarch, "BCM7444S");
-#endif
-#if BOXMODEL_VUULTIMO4K
+#elif BOXMODEL_VUULTIMO4K
 	initialized = 1;
 	caps.has_CI = 2;
 	caps.can_cec = 1;
@@ -110,8 +108,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "ULTIMO4K");
 	strcpy(caps.boxarch, "BCM7444S");
-#endif
-#if BOXMODEL_VUZERO4K
+#elif BOXMODEL_VUZERO4K
 	initialized = 1;
 	caps.has_CI = 1;
 	caps.can_cec = 1;
@@ -126,8 +123,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "ZERO4K");
 	strcpy(caps.boxarch, "BCM72604");
-#endif
-#if BOXMODEL_VUUNO4KSE
+#elif BOXMODEL_VUUNO4KSE
 	initialized = 1;
 	caps.has_CI = 1;
 	caps.can_cec = 1;
@@ -145,8 +141,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "UNO4KSE");
 	strcpy(caps.boxarch, "BCM7252S");
-#endif
-#if BOXMODEL_VUUNO4K
+#elif BOXMODEL_VUUNO4K
 	initialized = 1;
 	caps.has_CI = 1;
 	caps.can_cec = 1;
@@ -161,8 +156,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "UNO4K");
 	strcpy(caps.boxarch, "BCM7252S");
-#endif
-#if BOXMODEL_BRE2ZE4K
+#elif BOXMODEL_BRE2ZE4K
 	initialized = 1;
 	caps.has_CI = 1;
 	caps.can_cec = 1;
@@ -178,8 +172,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "WWIO");
 	strcpy(caps.boxname, "BRE2ZE4K");
 	strcpy(caps.boxarch, "BCM7251S");
-#endif
-#if BOXMODEL_HD51
+#elif BOXMODEL_HD51
 	initialized = 1;
 	caps.has_CI = 1;
 	caps.can_cec = 1;
@@ -195,8 +188,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "AX");
 	strcpy(caps.boxname, "HD51");
 	strcpy(caps.boxarch, "BCM7251S");
-#endif
-#if BOXMODEL_H7
+#elif BOXMODEL_H7
 	initialized = 1;
 	caps.has_CI = 1;
 	caps.can_cec = 1;
@@ -212,8 +204,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "AirDigital");
 	strcpy(caps.boxname, "Zgemma H7");
 	strcpy(caps.boxarch, "BCM7251S");
-#endif
-#if BOXMODEL_E4HDULTRA
+#elif BOXMODEL_E4HDULTRA
 	initialized = 1;
 	caps.has_CI = 1;
 	caps.can_cec = 1;
@@ -230,6 +221,23 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "AXAS");
 	strcpy(caps.boxname, "E4HD 4K ULTRA");
 	strcpy(caps.boxarch, "BCM7252S");
+#else // generic arm box 
+	initialized = 1;
+	caps.has_CI = 1;
+	caps.can_cec = 1;
+	caps.can_shutdown = 1;
+	caps.display_xres = 4;
+	caps.display_has_colon = 1;
+	caps.display_type = HW_DISPLAY_LED_NUM;
+	caps.display_can_deepstandby = 1;	// 0 because we use graphlcd/lcd4linux
+	caps.display_can_set_brightness = 1;	// 0 because we use graphlcd/lcd4linux
+	caps.display_has_statusline = 0;	// 0 because we use graphlcd/lcd4linux
+	caps.has_button_timer = 1;
+	caps.has_HDMI = 1;
+	caps.has_SCART = 1;
+	proc_get("/proc/stb/info/boxtype", caps.boxvendor, 10);
+	proc_get("/proc/stb/info/model", caps.boxname, 10);
+	proc_get("/proc/stb/info/chipset", caps.boxarch, 10);
 #endif
 	return &caps;
 }
diff --git a/libmipsbox/Makefile.am b/libmipsbox/Makefile.am
index 53b544d..a1bb73b 100644
--- a/libmipsbox/Makefile.am
+++ b/libmipsbox/Makefile.am
@@ -23,6 +23,15 @@ libmipsbox_la_SOURCES = \
 	record.cpp \
 	hdmi_cec.cpp
 
+if ENABLE_GSTREAMER_10
+libmipsbox_la_SOURCES += \
+	playback_gst.cpp
+
+AM_LDFLAGS += \
+	-lgstreamer-1.0 \
+	-lgsttag-1.0 \
+	-lgstmpegts-1.0
+else
 libmipsbox_la_SOURCES += \
 	playback_libeplayer3.cpp
 
@@ -31,5 +40,6 @@ AM_CPPFLAGS += \
 
 AM_LDFLAGS += \
 	-lass
+endif
 
 AM_CPPFLAGS += -D__STDC_FORMAT_MACROS -D__STDC_CONSTANT_MACROS
diff --git a/libmipsbox/hardware_caps.c b/libmipsbox/hardware_caps.c
index 04f8fef..20b78a2 100644
--- a/libmipsbox/hardware_caps.c
+++ b/libmipsbox/hardware_caps.c
@@ -17,6 +17,7 @@
 #include <sys/ioctl.h>
 
 #include <hardware_caps.h>
+#include <proc_tools.h>
 
 #define FP_DEV "/dev/dbox/oled0"
 static int initialized = 0;
@@ -52,8 +53,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "DUO");
 	strcpy(caps.boxarch, "BCM7335");
-#endif
-#if BOXMODEL_VUDUO2
+#elif BOXMODEL_VUDUO2
 	initialized = 1;
 	caps.has_CI = 2;
 	caps.can_cec = 1;
@@ -70,8 +70,7 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "VU+");
 	strcpy(caps.boxname, "DUO2");
 	strcpy(caps.boxarch, "BCM7424");
-#endif
-#if BOXMODEL_DM8000
+#elif BOXMODEL_DM8000
 	initialized = 1;
 	caps.has_CI = 4;
 	caps.can_cec = 0;
@@ -91,6 +90,23 @@ hw_caps_t *get_hwcaps(void)
 	strcpy(caps.boxvendor, "DM");
 	strcpy(caps.boxname, "8000HD");
 	strcpy(caps.boxarch, "BCM7400D2");
+#else // generic mips box 
+	initialized = 1;
+	caps.has_CI = 1;
+	caps.can_cec = 1;
+	caps.can_shutdown = 1;
+	caps.display_xres = 4;
+	caps.display_has_colon = 1;
+	caps.display_type = HW_DISPLAY_LED_NUM;
+	caps.display_can_deepstandby = 1;	// 0 because we use graphlcd/lcd4linux
+	caps.display_can_set_brightness = 1;	// 0 because we use graphlcd/lcd4linux
+	caps.display_has_statusline = 0;	// 0 because we use graphlcd/lcd4linux
+	caps.has_button_timer = 1;
+	caps.has_HDMI = 1;
+	caps.has_SCART = 1;
+	proc_get("/proc/stb/info/boxtype", caps.boxvendor, 10);
+	proc_get("/proc/stb/info/model", caps.boxname, 10);
+	proc_get("/proc/stb/info/chipset", caps.boxarch, 10);
 #endif
 	return &caps;
 }
