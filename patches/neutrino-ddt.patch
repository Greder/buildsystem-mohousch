diff --git a/configure.ac b/configure.ac
index 4a8e78f5f..7d766b165 100644
--- a/configure.ac
+++ b/configure.ac
@@ -269,8 +269,7 @@ fi
 
 AC_ARG_ENABLE(lua,
 	AS_HELP_STRING([--enable-lua], [enable Lua support @<:@default=yes@:>@]),
-	[enable_lua="$enableval"],
-	[enable_lua="yes"])
+	[enable_lua="$enableval"])
 
 if test "$enable_lua" = "yes"; then
 	AC_DEFINE(ENABLE_LUA, 1, [include Lua support])
diff --git a/src/driver/simple_display.cpp b/src/driver/simple_display.cpp
index 0999a41c7..abcd1beef 100644
--- a/src/driver/simple_display.cpp
+++ b/src/driver/simple_display.cpp
@@ -79,8 +79,49 @@ static bool vol_active = false;
 static inline int dev_open()
 {
 	int fd = open(DISPLAY_DEV, O_RDWR);
-	if (fd < 0)
-		fprintf(stderr, "[neutrino] simple_display: open " DISPLAY_DEV ": %m\n");
+	
+	//
+	if(fd < 0)
+	{
+		// probe /dev/vfd
+		fd = open("/dev/vfd", O_RDWR);
+		
+		if(fd < 0)
+		{
+			// probe /dev/display
+			fd = open("/dev/display", O_RDWR);
+			
+			if(fd < 0)
+			{
+				// probe /dev/mcu
+				fd = open("/dev/mcu", O_RDWR);
+
+				if(fd < 0)
+				{
+					// probe /proc/vfd
+					fd = open("/proc/vfd", O_RDWR);
+				
+					if(fd < 0)
+					{
+						// probe /dev/dbox/fp
+						fd = open("/dev/dbox/fp", O_RDWR);
+		
+						if(fd < 0) 
+						{
+							// probe /dev/oled0
+							fd = open("/dev/oled0", O_RDWR);
+						
+							if(fd < 0)
+							{
+								fprintf(stderr, "[neutrino] simple_display: open " DISPLAY_DEV ": %m\n");
+							}
+						}
+					}
+				}
+			}
+		}
+	}
+	
 	return fd;
 }
 
diff --git a/src/gui/plugins.cpp b/src/gui/plugins.cpp
index 79be18af4..e580e30f0 100644
--- a/src/gui/plugins.cpp
+++ b/src/gui/plugins.cpp
@@ -61,7 +61,9 @@ extern cVideo * videoDecoder;
 #include "plugins.h"
 
 #include <daemonc/remotecontrol.h>
+#ifdef ENABLE_LUA
 #include <gui/lua/luainstance.h>
+#endif
 
 extern CPlugins       * g_Plugins;    /* neutrino.cpp */
 extern CRemoteControl * g_RemoteControl; /* neutrino.cpp */
diff --git a/src/gui/widget/menue.cpp b/src/gui/widget/menue.cpp
index 3a868b5d3..af8411aa3 100644
--- a/src/gui/widget/menue.cpp
+++ b/src/gui/widget/menue.cpp
@@ -1869,12 +1869,15 @@ int CMenuOptionNumberChooser::exec(CMenuTarget *)
 	}
 
 	bool wantsRepaint = false;
+#ifdef ENABLE_LUA
 	if (observ && !luaAction.empty())
 	{
 		// optionValue is int*
 		wantsRepaint = observ->changeNotify(luaState, luaAction, luaId, (void *) to_string(*optionValue).c_str());
 	}
-	else if (observ)
+	else
+#endif 
+	if (observ)
 		wantsRepaint = observ->changeNotify(name, optionValue);
 
 	// give the observer a chance to modify the value
@@ -2197,12 +2200,15 @@ int CMenuOptionChooser::exec(CMenuTarget *)
 	}
 	paint(true);
 	OnAfterChangeOption();
+#ifdef ENABLE_LUA
 	if (observ && !luaAction.empty())
 	{
 		if (optionValname)
 			wantsRepaint = observ->changeNotify(luaState, luaAction, luaId, optionValname);
 	}
-	else if (observ)
+	else
+#endif 
+	if (observ)
 		wantsRepaint = observ->changeNotify(name, optionValue);
 
 	if (wantsRepaint)
@@ -2386,9 +2392,12 @@ int CMenuOptionStringChooser::exec(CMenuTarget *parent)
 
 		paint(true);
 	}
+#ifdef ENABLE_LUA
 	if (observ && !luaAction.empty())
 		wantsRepaint = observ->changeNotify(luaState, luaAction, luaId, (void *)(optionValuePtr ? optionValuePtr->c_str() : ""));
-	else if (observ)
+	else 
+#endif
+	if (observ)
 	{
 		wantsRepaint = observ->changeNotify(name, (void *)(optionValuePtr ? optionValuePtr->c_str() : ""));
 	}
diff --git a/src/gui/widget/menue.h b/src/gui/widget/menue.h
index a56fc15f9..a7612ba0c 100644
--- a/src/gui/widget/menue.h
+++ b/src/gui/widget/menue.h
@@ -46,11 +46,13 @@
 #include <vector>
 #include <neutrino_menue.h>
 #include "menue_target.h"
+#ifdef ENABLE_LUA
 extern "C" {
 #include <lua.h>
 #include <lauxlib.h>
 #include <lualib.h>
 }
+#endif
 
 #define NO_WIDGET_ID -1
 
@@ -92,10 +94,12 @@ class CChangeObserver
 		{
 			return false;
 		}
+#ifdef ENABLE_LUA
 		virtual bool changeNotify(lua_State * /*L*/, const std::string & /*luaId*/, const std::string & /*luaAction*/, void * /*Data*/)
 		{
 			return false;
 		}
+#endif
 };
 
 class CActivateObserver
@@ -117,9 +121,11 @@ class CMenuItem : public  CComponentsSignals
 		fb_pixel_t item_color, item_bgcolor;
 		bool initModeCondition(const int &stb_mode);
 		void initItemColors(const bool select_mode);
+#ifdef ENABLE_LUA
 		lua_State	*luaState;
 		std::string	luaAction;
 		std::string	luaId;
+#endif
 		neutrino_locale_t name;
 		std::string nameString;
 		neutrino_locale_t desc;
@@ -201,12 +207,14 @@ class CMenuItem : public  CComponentsSignals
 			hintText = text;
 		}
 
+#ifdef ENABLE_LUA
 		void setLua(lua_State *_luaState, std::string &_luaAction, std::string &_luaId)
 		{
 			luaState = _luaState;
 			luaAction = _luaAction;
 			luaId = _luaId;
 		};
+#endif
 		virtual const char *getName();
 		virtual void setName(const std::string &text);
 		virtual void setName(const neutrino_locale_t text);
diff --git a/src/system/Makefile.am b/src/system/Makefile.am
index 3839e1ee9..e9ab07af9 100644
--- a/src/system/Makefile.am
+++ b/src/system/Makefile.am
@@ -29,7 +29,6 @@ libneutrino_system_a_SOURCES = \
 	hddstat.cpp \
 	httptool.cpp \
 	lastchannel.cpp \
-	luaserver.cpp \
 	localize.cpp \
 	helpers.cpp \
 	ping.cpp \
@@ -39,3 +38,7 @@ libneutrino_system_a_SOURCES = \
 	sysload.cpp \
 	setting_helpers.cpp
 #	safe_system.c
+
+if ENABLE_LUA
+libneutrino_system_a_SOURCES += luaserver.cpp
+endif
