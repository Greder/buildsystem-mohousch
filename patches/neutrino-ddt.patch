diff -Nur neutrino-ddt.git/src/driver/simple_display.cpp neutrino-ddt.git.patched/src/driver/simple_display.cpp
--- neutrino-ddt.git/src/driver/simple_display.cpp	2023-04-08 22:32:29.559304450 +0200
+++ neutrino-ddt.git.patched/src/driver/simple_display.cpp	2023-05-03 21:28:24.803415000 +0200
@@ -79,8 +79,49 @@
 static inline int dev_open()
 {
 	int fd = open(DISPLAY_DEV, O_RDWR);
-	if (fd < 0)
-		fprintf(stderr, "[neutrino] simple_display: open " DISPLAY_DEV ": %m\n");
+	
+	//
+	if(fd < 0)
+	{
+		// probe /dev/vfd
+		fd = open("/dev/vfd", O_RDWR);
+		
+		if(fd < 0)
+		{
+			// probe /dev/display
+			fd = open("/dev/display", O_RDWR);
+			
+			if(fd < 0)
+			{
+				// probe /dev/mcu
+				fd = open("/dev/mcu", O_RDWR);
+
+				if(fd < 0)
+				{
+					// probe /proc/vfd
+					fd = open("/proc/vfd", O_RDWR);
+				
+					if(fd < 0)
+					{
+						// probe /dev/dbox/fp
+						fd = open("/dev/dbox/fp", O_RDWR);
+		
+						if(fd < 0) 
+						{
+							// probe /dev/oled0
+							fd = open("/dev/oled0", O_RDWR);
+						
+							if(fd < 0)
+							{
+								fprintf(stderr, "[neutrino] simple_display: open " DISPLAY_DEV ": %m\n");
+							}
+						}
+					}
+				}
+			}
+		}
+	}
+	
 	return fd;
 }
 
diff -Nur neutrino-ddt.git/src/eitd/xmlutil.cpp neutrino-ddt.git.patched/src/eitd/xmlutil.cpp
--- neutrino-ddt.git/src/eitd/xmlutil.cpp	2022-10-12 16:48:25.571581267 +0200
+++ neutrino-ddt.git.patched/src/eitd/xmlutil.cpp	2023-05-05 02:02:07.479910000 +0200
@@ -706,7 +706,7 @@
 	{
 		readEventsFromXMLTV(url, ev_count);
 	}
-	else if (::downloadUrl(url, tmp_name))
+	else if (::downloadUrl(url, tmp_name, "", 60))
 	{
 		if (!access(tmp_name.c_str(), R_OK))
 		{
diff -Nur neutrino-ddt.git/src/gui/webtv_setup.cpp neutrino-ddt.git.patched/src/gui/webtv_setup.cpp
--- neutrino-ddt.git/src/gui/webtv_setup.cpp	2023-05-04 11:52:06.103270822 +0200
+++ neutrino-ddt.git.patched/src/gui/webtv_setup.cpp	2023-05-05 10:56:47.145529000 +0200
@@ -116,6 +116,7 @@
 		fileFilter.addFilter("xml");
 		fileFilter.addFilter("tv");
 		fileFilter.addFilter("m3u");
+		fileFilter.addFilter("m3u8");
 		fileBrowser.Filter = &fileFilter;
 		if (fileBrowser.exec(g_settings.last_webtv_dir.c_str()) == true)
 		{
diff -Nur neutrino-ddt.git/src/system/helpers.cpp neutrino-ddt.git.patched/src/system/helpers.cpp
--- neutrino-ddt.git/src/system/helpers.cpp	2022-07-23 18:41:26.115460814 +0200
+++ neutrino-ddt.git.patched/src/system/helpers.cpp	2023-05-05 02:01:06.940110000 +0200
@@ -1747,9 +1747,13 @@
 	curl_easy_setopt(curl_handle, CURLOPT_FILE, fp);
 	curl_easy_setopt(curl_handle, CURLOPT_FAILONERROR, 1);
 	curl_easy_setopt(curl_handle, CURLOPT_TIMEOUT, timeout);
+	curl_easy_setopt(curl_handle, CURLOPT_CONNECTTIMEOUT, (long)timeout);
 	curl_easy_setopt(curl_handle, CURLOPT_NOSIGNAL, (long)1);
 	curl_easy_setopt(curl_handle, CURLOPT_SSL_VERIFYPEER, false);
 	curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, userAgent.c_str());
+	curl_easy_setopt(curl_handle, CURLOPT_ACCEPT_ENCODING, "");//
+	curl_easy_setopt(curl_handle, CURLOPT_COOKIE, "");//
+	curl_easy_setopt(curl_handle, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);//
 
 	if (!g_settings.softupdate_proxyserver.empty())
 	{
@@ -1760,6 +1764,9 @@
 			curl_easy_setopt(curl_handle, CURLOPT_PROXYUSERPWD, tmp.c_str());
 		}
 	}
+	
+	curl_easy_setopt(curl_handle, CURLOPT_FOLLOWLOCATION, 1L);
+	curl_easy_setopt(curl_handle, CURLOPT_MAXREDIRS, (long)20);
 
 	char cerror[CURL_ERROR_SIZE];
 	curl_easy_setopt(curl_handle, CURLOPT_ERRORBUFFER, cerror);
diff -Nur neutrino-ddt.git/src/zapit/src/bouquets.cpp neutrino-ddt.git.patched/src/zapit/src/bouquets.cpp
--- neutrino-ddt.git/src/zapit/src/bouquets.cpp	2023-05-04 11:52:06.107266630 +0200
+++ neutrino-ddt.git.patched/src/zapit/src/bouquets.cpp	2023-05-05 01:59:17.872530000 +0200
@@ -800,7 +800,7 @@
 
 			if (strcasecmp("xml", extension.c_str()) == 0)
 				xml = true;
-			if ((strcasecmp("m3u", extension.c_str()) == 0) || (strcasecmp("m3u8", extension.c_str()) == 0))
+			if ( (strcasecmp("m3u", extension.c_str()) == 0) || (strcasecmp("m3u8", extension.c_str()) == 0) )
 				m3u = true;
 			if (strcasecmp("tv", extension.c_str()) == 0)
 				e2tv = true;
@@ -911,6 +911,14 @@
 						printf("tvg-url: %s\n", epg_url.c_str());
 						if (!epg_url.empty())
 						{
+							//
+							std::string ext = getFileExt(epg_url);
+					
+							if (ext == "gz")
+							{
+								str_replace(".gz", "", epg_url);
+							}
+							
 							if (epg_url.find_first_of(',') != std::string::npos)
 							{
 								std::vector<std::string> epg_list = ::split(epg_url, ',');
